import React, { useState, useEffect, useRef } from "react";
import Head from "next/head";
import { setDoc, doc } from "firebase/firestore";
import { useRouter } from "next/router";

import ThemeWrapper from "../../components/ThemeWrapper";
import Navbar from "../../components/Navbar";
import Card from "../../components/Card";
import { db } from "../../logic/firebase";
import { cards } from "../../cards.config";
import styles from "../../styles/Trade.module.css";

export default function Menu() {
  const { asPath } = useRouter();
  const id = parseInt(asPath.replace("/trade/menu?id=", ""));

  const [user, setUser] = useState(null);
  const [userData, setUserData] = useState(null);

  const [plus, setPlus] = useState(false);
  const [price, setPrice] = useState([]);
  const [realCard, setRealCard] = useState(null);

  const inputRef = useRef(null);

  useEffect(() => {
    const user = JSON.parse(localStorage.getItem("weilai_user")) || null;
    const userData = JSON.parse(localStorage.getItem("weilai_data")) || null;
    setUser(user);
    setUserData(userData);
    const location = window.location.href;
    const params = new URLSearchParams(location);
    const strength_temp = params.get("strength");
    const health_temp = params.get("health");
    const intelligence_temp = params.get("intelligence");
    if (id) {
      let temp_card = cards[id];
      temp_card.strength = strength_temp;
      temp_card.health = health_temp;
      temp_card.intelligence = intelligence_temp;
      setRealCard(temp_card);
    }
  }, []);

  const Option = ({ name }) => {
    return (
      <div className={styles.option}>
        <span>&rarr; </span>
        <span>{name}</span>
      </div>
    );
  };

  const OptionInput = () => {
    return (
      <>
        {/* <span>&rarr; </span>
        <input placeholder="Your price.." ref={inputRef}></input> */}
        <span>&rarr; </span>
        <select ref={inputRef} style={{ width: "200px" }}>
          <option>Herb Carolus</option>
          <option>The Stone</option>
          <option>Vasant Aabraham</option>
          <option>Rachel Green</option>
          <option>Chef Jack</option>
          <option>Agent Vinny</option>
          <option>Dr. Amanda</option>
          <option>Bill</option>
        </select>
      </>
    );
  };

  const submitToBackend = async () => {
    const card_id = `${user.displayName}x${cards[id].name}${Math.floor(
      Math.random() * 100
    )}`;
    const data = {
      price: price,
      username: user.displayName,
      cardName: cards[id].name,
      id: card_id,
      card: cards[id],
    };
    await setDoc(doc(db, "tradables", card_id), data);
    console.log("trade uploaded!");
    window.location.replace("/marketplace");
  };

  return (
    <>
      <Head>
        <title>Weilai</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css"
          rel="stylesheet"
        />
      </Head>
      <ThemeWrapper>
        <div className={`main_new`}>
          <Navbar user={user} />
          <div className={styles.main}>
            {realCard && (
              <>
                <Card card={realCard} />
                <div className={styles.right}>
                  <h1>{`Trade For ${realCard.name}`}</h1>
                  <p className={styles.returnHeading}>
                    What you want in return
                  </p>
                  <div className={styles.optionsWrapper}>
                    {price.map((e) => (
                      <Option name={e} key={Math.floor(Math.random() * 1617)}/>
                    ))}
                    {plus && <OptionInput />}
                    <br />
                    <span
                      className={styles.plus}
                      onClick={() => {
                        setPlus(true);
                        if (plus) {
                          let _temp = price || [];
                          _temp.push(inputRef.current.value);
                          setPrice(_temp);
                          setPlus(false);
                        }
                      }}
                    >
                      +
                    </span>
                    <span
                      className={styles.minus}
                      onClick={() => {
                        let _temp = price || [];
                        _temp.splice(_temp.length - 1, 1);
                        setPlus(!plus);
                        setPrice(_temp);
                      }}
                    >
                      -
                    </span>
                  </div>
                </div>
              </>
            )}
          </div>
          <button
            className={styles.submitButton}
            onClick={() => submitToBackend()}
          >
            Submit
          </button>
        </div>
      </ThemeWrapper>
    </>
  );
}
